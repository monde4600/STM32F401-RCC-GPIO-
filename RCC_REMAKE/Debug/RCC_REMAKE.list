
RCC_REMAKE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c0  080003c8  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c0  080003c0  000103c8  2**0
                  CONTENTS
  4 .ARM          00000000  080003c0  080003c0  000103c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c0  080003c8  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c0  080003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003c8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003c8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a74  00000000  00000000  000103f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000305  00000000  00000000  00010e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  00011178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00011250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000006fd  00000000  00000000  000112f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000095e  00000000  00000000  000119ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000471e  00000000  00000000  0001234b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00016a69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000250  00000000  00000000  00016abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003a8 	.word	0x080003a8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003a8 	.word	0x080003a8

080001d4 <MGPIO_vSetPinMode>:
#include "STD_TYPES.h"
#include "GPIO_config.h"
#include "GPIO_private.h"

void MGPIO_vSetPinMode(GPIO_t* Copy_enuPortName ,GPIO_PIN_t Copy_enuPinNum ,GPIO_MODE_t Copy_enuMode  )
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	70fb      	strb	r3, [r7, #3]
 80001e0:	4613      	mov	r3, r2
 80001e2:	70bb      	strb	r3, [r7, #2]
	Copy_enuPortName->MODER &=~((_MODE_ANALOG)<<(Copy_enuPinNum*2));
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	78fa      	ldrb	r2, [r7, #3]
 80001ea:	0052      	lsls	r2, r2, #1
 80001ec:	2103      	movs	r1, #3
 80001ee:	fa01 f202 	lsl.w	r2, r1, r2
 80001f2:	43d2      	mvns	r2, r2
 80001f4:	401a      	ands	r2, r3
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	601a      	str	r2, [r3, #0]
	Copy_enuPortName->MODER |=(Copy_enuMode)<<(Copy_enuPinNum*2);
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	78b9      	ldrb	r1, [r7, #2]
 8000200:	78fa      	ldrb	r2, [r7, #3]
 8000202:	0052      	lsls	r2, r2, #1
 8000204:	fa01 f202 	lsl.w	r2, r1, r2
 8000208:	431a      	orrs	r2, r3
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	601a      	str	r2, [r3, #0]
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
	...

0800021c <MRCC_vInitSystemCLK>:
#include "BIT_MATH.h"
#include "RCC_config.h"
#include "RCC_private.h"
#include "RCC_interface.h"
void MRCC_vInitSystemCLK(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
#if SYS_CLOCK_SRC == HSE
	#if HSE_CLOCK_SRC == CRYSTAL_CLOCK
	CLR_BIT(MRCC->CR,HSEBYP);
 8000220:	4b13      	ldr	r3, [pc, #76]	; (8000270 <MRCC_vInitSystemCLK+0x54>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a12      	ldr	r2, [pc, #72]	; (8000270 <MRCC_vInitSystemCLK+0x54>)
 8000226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800022a:	6013      	str	r3, [r2, #0]
	#elif HSE_CLOCK_SRC == RC_CLOCK
	SET_BIT(MRCC->CR,HSEBYP);
	#else
		#error"wrong config";
	#endif
	SET_BIT(MRCC->CR,HSEON);
 800022c:	4b10      	ldr	r3, [pc, #64]	; (8000270 <MRCC_vInitSystemCLK+0x54>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <MRCC_vInitSystemCLK+0x54>)
 8000232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000236:	6013      	str	r3, [r2, #0]
	while(!GET_BIT(MRCC->CR,HSERDY));
 8000238:	bf00      	nop
 800023a:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <MRCC_vInitSystemCLK+0x54>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	0c5b      	lsrs	r3, r3, #17
 8000240:	f003 0301 	and.w	r3, r3, #1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d0f8      	beq.n	800023a <MRCC_vInitSystemCLK+0x1e>
	MRCC->CFGR |= HSE;
 8000248:	4b09      	ldr	r3, [pc, #36]	; (8000270 <MRCC_vInitSystemCLK+0x54>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	4a08      	ldr	r2, [pc, #32]	; (8000270 <MRCC_vInitSystemCLK+0x54>)
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6093      	str	r3, [r2, #8]
	while(!(MRCC->CFGR & HSE));
 8000254:	bf00      	nop
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <MRCC_vInitSystemCLK+0x54>)
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	f003 0301 	and.w	r3, r3, #1
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0f9      	beq.n	8000256 <MRCC_vInitSystemCLK+0x3a>
	MRCC->CFGR |= HSI;
#else
	#error"wrong config";
#endif

}
 8000262:	bf00      	nop
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40023800 	.word	0x40023800

08000274 <MRCC_vEnableClock>:

void MRCC_vEnableClock(BusName_t BusName , u8 Copy_u8PerNum )
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	460a      	mov	r2, r1
 800027e:	71fb      	strb	r3, [r7, #7]
 8000280:	4613      	mov	r3, r2
 8000282:	71bb      	strb	r3, [r7, #6]
	if(BusName == AHB1 ||BusName == AHB2)
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d002      	beq.n	8000290 <MRCC_vEnableClock+0x1c>
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d10e      	bne.n	80002ae <MRCC_vEnableClock+0x3a>
	{
		SET_BIT(MRCC->AHB_ENR[BusName],Copy_u8PerNum);
 8000290:	4a15      	ldr	r2, [pc, #84]	; (80002e8 <MRCC_vEnableClock+0x74>)
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	330c      	adds	r3, #12
 8000296:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800029a:	79bb      	ldrb	r3, [r7, #6]
 800029c:	2201      	movs	r2, #1
 800029e:	409a      	lsls	r2, r3
 80002a0:	4811      	ldr	r0, [pc, #68]	; (80002e8 <MRCC_vEnableClock+0x74>)
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	430a      	orrs	r2, r1
 80002a6:	330c      	adds	r3, #12
 80002a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	}
	else if(BusName == APB1 ||BusName == APB2)
	{
		SET_BIT(MRCC->APB_ENR[BusName-APB1],Copy_u8PerNum);
	}
}
 80002ac:	e015      	b.n	80002da <MRCC_vEnableClock+0x66>
	else if(BusName == APB1 ||BusName == APB2)
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	d002      	beq.n	80002ba <MRCC_vEnableClock+0x46>
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	2b03      	cmp	r3, #3
 80002b8:	d10f      	bne.n	80002da <MRCC_vEnableClock+0x66>
		SET_BIT(MRCC->APB_ENR[BusName-APB1],Copy_u8PerNum);
 80002ba:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <MRCC_vEnableClock+0x74>)
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	3b02      	subs	r3, #2
 80002c0:	3310      	adds	r3, #16
 80002c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80002c6:	79bb      	ldrb	r3, [r7, #6]
 80002c8:	2201      	movs	r2, #1
 80002ca:	409a      	lsls	r2, r3
 80002cc:	4806      	ldr	r0, [pc, #24]	; (80002e8 <MRCC_vEnableClock+0x74>)
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	3b02      	subs	r3, #2
 80002d2:	430a      	orrs	r2, r1
 80002d4:	3310      	adds	r3, #16
 80002d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40023800 	.word	0x40023800

080002ec <main>:

#include "STD_TYPES.h"
#include "RCC_interface.h"
#include "GPIO_interface.h"
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	MRCC_vInitSystemCLK();
 80002f0:	f7ff ff94 	bl	800021c <MRCC_vInitSystemCLK>
    /* Loop forever */
	MRCC_vEnableClock(AHB1, _PERIPHERAL_EN_GPIOA);
 80002f4:	2100      	movs	r1, #0
 80002f6:	2000      	movs	r0, #0
 80002f8:	f7ff ffbc 	bl	8000274 <MRCC_vEnableClock>
	MGPIO_vSetPinMode(_GPIOA_PORT, GPIO_PIN_5,_MODE_OUTPUT);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2105      	movs	r1, #5
 8000300:	4801      	ldr	r0, [pc, #4]	; (8000308 <main+0x1c>)
 8000302:	f7ff ff67 	bl	80001d4 <MGPIO_vSetPinMode>
	//MGPIO_vPinLock(_GPIOA_PORT, GPIO_PIN_0);
	for(;;);
 8000306:	e7fe      	b.n	8000306 <main+0x1a>
 8000308:	40020000 	.word	0x40020000

0800030c <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000310:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000314:	480c      	ldr	r0, [pc, #48]	; (8000348 <LoopForever+0x6>)
  ldr r1, =_edata
 8000316:	490d      	ldr	r1, [pc, #52]	; (800034c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000318:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <LoopForever+0xe>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800032c:	4c0a      	ldr	r4, [pc, #40]	; (8000358 <LoopForever+0x16>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033a:	f000 f811 	bl	8000360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033e:	f7ff ffd5 	bl	80002ec <main>

08000342 <LoopForever>:

LoopForever:
    b LoopForever
 8000342:	e7fe      	b.n	8000342 <LoopForever>
  ldr   r0, =_estack
 8000344:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800034c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000350:	080003c8 	.word	0x080003c8
  ldr r2, =_sbss
 8000354:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000358:	2000001c 	.word	0x2000001c

0800035c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800035c:	e7fe      	b.n	800035c <ADC_IRQHandler>
	...

08000360 <__libc_init_array>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	4d0d      	ldr	r5, [pc, #52]	; (8000398 <__libc_init_array+0x38>)
 8000364:	4c0d      	ldr	r4, [pc, #52]	; (800039c <__libc_init_array+0x3c>)
 8000366:	1b64      	subs	r4, r4, r5
 8000368:	10a4      	asrs	r4, r4, #2
 800036a:	2600      	movs	r6, #0
 800036c:	42a6      	cmp	r6, r4
 800036e:	d109      	bne.n	8000384 <__libc_init_array+0x24>
 8000370:	4d0b      	ldr	r5, [pc, #44]	; (80003a0 <__libc_init_array+0x40>)
 8000372:	4c0c      	ldr	r4, [pc, #48]	; (80003a4 <__libc_init_array+0x44>)
 8000374:	f000 f818 	bl	80003a8 <_init>
 8000378:	1b64      	subs	r4, r4, r5
 800037a:	10a4      	asrs	r4, r4, #2
 800037c:	2600      	movs	r6, #0
 800037e:	42a6      	cmp	r6, r4
 8000380:	d105      	bne.n	800038e <__libc_init_array+0x2e>
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f855 3b04 	ldr.w	r3, [r5], #4
 8000388:	4798      	blx	r3
 800038a:	3601      	adds	r6, #1
 800038c:	e7ee      	b.n	800036c <__libc_init_array+0xc>
 800038e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000392:	4798      	blx	r3
 8000394:	3601      	adds	r6, #1
 8000396:	e7f2      	b.n	800037e <__libc_init_array+0x1e>
 8000398:	080003c0 	.word	0x080003c0
 800039c:	080003c0 	.word	0x080003c0
 80003a0:	080003c0 	.word	0x080003c0
 80003a4:	080003c4 	.word	0x080003c4

080003a8 <_init>:
 80003a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003aa:	bf00      	nop
 80003ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ae:	bc08      	pop	{r3}
 80003b0:	469e      	mov	lr, r3
 80003b2:	4770      	bx	lr

080003b4 <_fini>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr
